// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: api/test/data.proto

package testpb

import (
	context "context"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	GetFile(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Data, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (DataService_UploadClient, error)
	Download(ctx context.Context, in *Input, opts ...grpc.CallOption) (DataService_DownloadClient, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) GetFile(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/orznewbie.api.test.DataService/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (DataService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[0], "/orznewbie.api.test.DataService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceUploadClient{stream}
	return x, nil
}

type DataService_UploadClient interface {
	Send(*Data) error
	CloseAndRecv() (*status.Status, error)
	grpc.ClientStream
}

type dataServiceUploadClient struct {
	grpc.ClientStream
}

func (x *dataServiceUploadClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataServiceUploadClient) CloseAndRecv() (*status.Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(status.Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServiceClient) Download(ctx context.Context, in *Input, opts ...grpc.CallOption) (DataService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[1], "/orznewbie.api.test.DataService/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataService_DownloadClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type dataServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *dataServiceDownloadClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	GetFile(context.Context, *Input) (*Data, error)
	Upload(DataService_UploadServer) error
	Download(*Input, DataService_DownloadServer) error
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) GetFile(context.Context, *Input) (*Data, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedDataServiceServer) Upload(DataService_UploadServer) error {
	return status1.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDataServiceServer) Download(*Input, DataService_DownloadServer) error {
	return status1.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orznewbie.api.test.DataService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetFile(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).Upload(&dataServiceUploadServer{stream})
}

type DataService_UploadServer interface {
	SendAndClose(*status.Status) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type dataServiceUploadServer struct {
	grpc.ServerStream
}

func (x *dataServiceUploadServer) SendAndClose(m *status.Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataServiceUploadServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Input)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).Download(m, &dataServiceDownloadServer{stream})
}

type DataService_DownloadServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type dataServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *dataServiceDownloadServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orznewbie.api.test.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFile",
			Handler:    _DataService_GetFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _DataService_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _DataService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/test/data.proto",
}
